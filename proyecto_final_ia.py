# -*- coding: utf-8 -*-
"""Proyecto Final IA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q9q97jwNRK8EgaJjLSm8NQ082g43E2-8

# Recolectar y preparar los datos
"""

import yfinance as yf
import pandas as pd
import xgboost as xgb
import numpy as np
import joblib
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split

stock_data = yf.download("SPY", start="2015-01-01", end="2023-01-01")
stock_data.to_csv("stock_data.csv")

stock_data['Moving_Avg'] = stock_data['Close'].rolling(window=20).mean()
stock_data['Target'] = stock_data['Close'].shift(-1) > stock_data['Close']
stock_data.dropna(inplace=True)
btc_data = yf.download("BTC-USD", start="2015-01-01", end="2023-01-01")
btc_data.to_csv("bitcoin_data.csv")

btc_data['Moving_Avg'] = btc_data['Close'].rolling(window=20).mean()
btc_data['Target'] = btc_data['Close'].shift(-1) > btc_data['Close']
btc_data['y_btc'] = btc_data['Close'].shift(-1)
btc_data.dropna(inplace=True)

"""# Modelo para la Bolsa de Valores"""

X = stock_data[['Open', 'High', 'Low', 'Volume', 'Moving_Avg']]
y = stock_data['Target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model_stock = RandomForestClassifier()
model_stock.fit(X_train, y_train)

y_pred = model_stock.predict(X_test)
print(classification_report(y_test, y_pred))

"""# Modelo para Bitcoin"""

X_btc = btc_data[['Open', 'High', 'Low', 'Volume']]
y_btc = btc_data['y_btc']

X_train_btc, X_test_btc, y_train_btc, y_test_btc = train_test_split(
    X_btc, y_btc, test_size=0.2, random_state=42
)

model_btc = xgb.XGBRegressor()
model_btc.fit(X_train_btc, y_train_btc)

y_pred_btc = model_btc.predict(X_test_btc)

rmse = np.sqrt(mean_squared_error(y_test_btc, y_pred_btc))
print("RMSE:", rmse)

"""# Guardar Datos"""

joblib.dump(model_stock, "output/stock_model.pkl")
joblib.dump(model_btc, "output/bitcoin_model.pkl")